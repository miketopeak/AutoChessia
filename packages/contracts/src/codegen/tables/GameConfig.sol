// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("GameConfig")));
bytes32 constant GameConfigTableId = _tableId;

struct GameConfigData {
  uint32 boardIndex;
  uint32 creatureIndex;
  uint32 length;
  uint32 width;
  uint8 revenue;
  uint8 rvnGrowthPeriod;
  uint8 storeSlotNum;
}

library GameConfig {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](7);
    _schema[0] = SchemaType.UINT32;
    _schema[1] = SchemaType.UINT32;
    _schema[2] = SchemaType.UINT32;
    _schema[3] = SchemaType.UINT32;
    _schema[4] = SchemaType.UINT8;
    _schema[5] = SchemaType.UINT8;
    _schema[6] = SchemaType.UINT8;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](0);

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](7);
    _fieldNames[0] = "boardIndex";
    _fieldNames[1] = "creatureIndex";
    _fieldNames[2] = "length";
    _fieldNames[3] = "width";
    _fieldNames[4] = "revenue";
    _fieldNames[5] = "rvnGrowthPeriod";
    _fieldNames[6] = "storeSlotNum";
    return ("GameConfig", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get boardIndex */
  function getBoardIndex() internal view returns (uint32 boardIndex) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get boardIndex (using the specified store) */
  function getBoardIndex(IStore _store) internal view returns (uint32 boardIndex) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set boardIndex */
  function setBoardIndex(uint32 boardIndex) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((boardIndex)));
  }

  /** Set boardIndex (using the specified store) */
  function setBoardIndex(IStore _store, uint32 boardIndex) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((boardIndex)));
  }

  /** Get creatureIndex */
  function getCreatureIndex() internal view returns (uint32 creatureIndex) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get creatureIndex (using the specified store) */
  function getCreatureIndex(IStore _store) internal view returns (uint32 creatureIndex) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set creatureIndex */
  function setCreatureIndex(uint32 creatureIndex) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((creatureIndex)));
  }

  /** Set creatureIndex (using the specified store) */
  function setCreatureIndex(IStore _store, uint32 creatureIndex) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((creatureIndex)));
  }

  /** Get length */
  function getLength() internal view returns (uint32 length) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get length (using the specified store) */
  function getLength(IStore _store) internal view returns (uint32 length) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set length */
  function setLength(uint32 length) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setField(_tableId, _keyTuple, 2, abi.encodePacked((length)));
  }

  /** Set length (using the specified store) */
  function setLength(IStore _store, uint32 length) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.setField(_tableId, _keyTuple, 2, abi.encodePacked((length)));
  }

  /** Get width */
  function getWidth() internal view returns (uint32 width) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 3);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get width (using the specified store) */
  function getWidth(IStore _store) internal view returns (uint32 width) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 3);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set width */
  function setWidth(uint32 width) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setField(_tableId, _keyTuple, 3, abi.encodePacked((width)));
  }

  /** Set width (using the specified store) */
  function setWidth(IStore _store, uint32 width) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.setField(_tableId, _keyTuple, 3, abi.encodePacked((width)));
  }

  /** Get revenue */
  function getRevenue() internal view returns (uint8 revenue) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 4);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get revenue (using the specified store) */
  function getRevenue(IStore _store) internal view returns (uint8 revenue) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 4);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set revenue */
  function setRevenue(uint8 revenue) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setField(_tableId, _keyTuple, 4, abi.encodePacked((revenue)));
  }

  /** Set revenue (using the specified store) */
  function setRevenue(IStore _store, uint8 revenue) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.setField(_tableId, _keyTuple, 4, abi.encodePacked((revenue)));
  }

  /** Get rvnGrowthPeriod */
  function getRvnGrowthPeriod() internal view returns (uint8 rvnGrowthPeriod) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 5);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get rvnGrowthPeriod (using the specified store) */
  function getRvnGrowthPeriod(IStore _store) internal view returns (uint8 rvnGrowthPeriod) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 5);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set rvnGrowthPeriod */
  function setRvnGrowthPeriod(uint8 rvnGrowthPeriod) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setField(_tableId, _keyTuple, 5, abi.encodePacked((rvnGrowthPeriod)));
  }

  /** Set rvnGrowthPeriod (using the specified store) */
  function setRvnGrowthPeriod(IStore _store, uint8 rvnGrowthPeriod) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.setField(_tableId, _keyTuple, 5, abi.encodePacked((rvnGrowthPeriod)));
  }

  /** Get storeSlotNum */
  function getStoreSlotNum() internal view returns (uint8 storeSlotNum) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 6);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get storeSlotNum (using the specified store) */
  function getStoreSlotNum(IStore _store) internal view returns (uint8 storeSlotNum) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 6);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set storeSlotNum */
  function setStoreSlotNum(uint8 storeSlotNum) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setField(_tableId, _keyTuple, 6, abi.encodePacked((storeSlotNum)));
  }

  /** Set storeSlotNum (using the specified store) */
  function setStoreSlotNum(IStore _store, uint8 storeSlotNum) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.setField(_tableId, _keyTuple, 6, abi.encodePacked((storeSlotNum)));
  }

  /** Get the full data */
  function get() internal view returns (GameConfigData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store) internal view returns (GameConfigData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(
    uint32 boardIndex,
    uint32 creatureIndex,
    uint32 length,
    uint32 width,
    uint8 revenue,
    uint8 rvnGrowthPeriod,
    uint8 storeSlotNum
  ) internal {
    bytes memory _data = encode(boardIndex, creatureIndex, length, width, revenue, rvnGrowthPeriod, storeSlotNum);

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    uint32 boardIndex,
    uint32 creatureIndex,
    uint32 length,
    uint32 width,
    uint8 revenue,
    uint8 rvnGrowthPeriod,
    uint8 storeSlotNum
  ) internal {
    bytes memory _data = encode(boardIndex, creatureIndex, length, width, revenue, rvnGrowthPeriod, storeSlotNum);

    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using the data struct */
  function set(GameConfigData memory _table) internal {
    set(
      _table.boardIndex,
      _table.creatureIndex,
      _table.length,
      _table.width,
      _table.revenue,
      _table.rvnGrowthPeriod,
      _table.storeSlotNum
    );
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, GameConfigData memory _table) internal {
    set(
      _store,
      _table.boardIndex,
      _table.creatureIndex,
      _table.length,
      _table.width,
      _table.revenue,
      _table.rvnGrowthPeriod,
      _table.storeSlotNum
    );
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal pure returns (GameConfigData memory _table) {
    _table.boardIndex = (uint32(Bytes.slice4(_blob, 0)));

    _table.creatureIndex = (uint32(Bytes.slice4(_blob, 4)));

    _table.length = (uint32(Bytes.slice4(_blob, 8)));

    _table.width = (uint32(Bytes.slice4(_blob, 12)));

    _table.revenue = (uint8(Bytes.slice1(_blob, 16)));

    _table.rvnGrowthPeriod = (uint8(Bytes.slice1(_blob, 17)));

    _table.storeSlotNum = (uint8(Bytes.slice1(_blob, 18)));
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    uint32 boardIndex,
    uint32 creatureIndex,
    uint32 length,
    uint32 width,
    uint8 revenue,
    uint8 rvnGrowthPeriod,
    uint8 storeSlotNum
  ) internal view returns (bytes memory) {
    return abi.encodePacked(boardIndex, creatureIndex, length, width, revenue, rvnGrowthPeriod, storeSlotNum);
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple() internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](0);
  }

  /* Delete all data for given keys */
  function deleteRecord() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.deleteRecord(_tableId, _keyTuple);
  }
}
