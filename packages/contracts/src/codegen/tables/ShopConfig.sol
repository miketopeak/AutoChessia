// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("ShopConfig")));
bytes32 constant ShopConfigTableId = _tableId;

struct ShopConfigData {
  uint8 slotNum;
  uint8 refreshPrice;
  uint8 exPrice;
  uint8[] tierPrice;
  uint8[] tierRate;
}

library ShopConfig {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](5);
    _schema[0] = SchemaType.UINT8;
    _schema[1] = SchemaType.UINT8;
    _schema[2] = SchemaType.UINT8;
    _schema[3] = SchemaType.UINT8_ARRAY;
    _schema[4] = SchemaType.UINT8_ARRAY;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](5);
    _fieldNames[0] = "slotNum";
    _fieldNames[1] = "refreshPrice";
    _fieldNames[2] = "exPrice";
    _fieldNames[3] = "tierPrice";
    _fieldNames[4] = "tierRate";
    return ("ShopConfig", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get slotNum */
  function getSlotNum(bytes32 key) internal view returns (uint8 slotNum) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get slotNum (using the specified store) */
  function getSlotNum(IStore _store, bytes32 key) internal view returns (uint8 slotNum) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set slotNum */
  function setSlotNum(bytes32 key, uint8 slotNum) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((slotNum)));
  }

  /** Set slotNum (using the specified store) */
  function setSlotNum(IStore _store, bytes32 key, uint8 slotNum) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((slotNum)));
  }

  /** Get refreshPrice */
  function getRefreshPrice(bytes32 key) internal view returns (uint8 refreshPrice) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get refreshPrice (using the specified store) */
  function getRefreshPrice(IStore _store, bytes32 key) internal view returns (uint8 refreshPrice) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set refreshPrice */
  function setRefreshPrice(bytes32 key, uint8 refreshPrice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((refreshPrice)));
  }

  /** Set refreshPrice (using the specified store) */
  function setRefreshPrice(IStore _store, bytes32 key, uint8 refreshPrice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((refreshPrice)));
  }

  /** Get exPrice */
  function getExPrice(bytes32 key) internal view returns (uint8 exPrice) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get exPrice (using the specified store) */
  function getExPrice(IStore _store, bytes32 key) internal view returns (uint8 exPrice) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set exPrice */
  function setExPrice(bytes32 key, uint8 exPrice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setField(_tableId, _keyTuple, 2, abi.encodePacked((exPrice)));
  }

  /** Set exPrice (using the specified store) */
  function setExPrice(IStore _store, bytes32 key, uint8 exPrice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setField(_tableId, _keyTuple, 2, abi.encodePacked((exPrice)));
  }

  /** Get tierPrice */
  function getTierPrice(bytes32 key) internal view returns (uint8[] memory tierPrice) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 3);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint8());
  }

  /** Get tierPrice (using the specified store) */
  function getTierPrice(IStore _store, bytes32 key) internal view returns (uint8[] memory tierPrice) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 3);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint8());
  }

  /** Set tierPrice */
  function setTierPrice(bytes32 key, uint8[] memory tierPrice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setField(_tableId, _keyTuple, 3, EncodeArray.encode((tierPrice)));
  }

  /** Set tierPrice (using the specified store) */
  function setTierPrice(IStore _store, bytes32 key, uint8[] memory tierPrice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setField(_tableId, _keyTuple, 3, EncodeArray.encode((tierPrice)));
  }

  /** Get the length of tierPrice */
  function lengthTierPrice(bytes32 key) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 3, getSchema());
    return _byteLength / 1;
  }

  /** Get the length of tierPrice (using the specified store) */
  function lengthTierPrice(IStore _store, bytes32 key) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 3, getSchema());
    return _byteLength / 1;
  }

  /** Get an item of tierPrice (unchecked, returns invalid data if index overflows) */
  function getItemTierPrice(bytes32 key, uint256 _index) internal view returns (uint8) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getFieldSlice(_tableId, _keyTuple, 3, getSchema(), _index * 1, (_index + 1) * 1);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get an item of tierPrice (using the specified store) (unchecked, returns invalid data if index overflows) */
  function getItemTierPrice(IStore _store, bytes32 key, uint256 _index) internal view returns (uint8) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 3, getSchema(), _index * 1, (_index + 1) * 1);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Push an element to tierPrice */
  function pushTierPrice(bytes32 key, uint8 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.pushToField(_tableId, _keyTuple, 3, abi.encodePacked((_element)));
  }

  /** Push an element to tierPrice (using the specified store) */
  function pushTierPrice(IStore _store, bytes32 key, uint8 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.pushToField(_tableId, _keyTuple, 3, abi.encodePacked((_element)));
  }

  /** Pop an element from tierPrice */
  function popTierPrice(bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.popFromField(_tableId, _keyTuple, 3, 1);
  }

  /** Pop an element from tierPrice (using the specified store) */
  function popTierPrice(IStore _store, bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.popFromField(_tableId, _keyTuple, 3, 1);
  }

  /** Update an element of tierPrice at `_index` */
  function updateTierPrice(bytes32 key, uint256 _index, uint8 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.updateInField(_tableId, _keyTuple, 3, _index * 1, abi.encodePacked((_element)));
  }

  /** Update an element of tierPrice (using the specified store) at `_index` */
  function updateTierPrice(IStore _store, bytes32 key, uint256 _index, uint8 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.updateInField(_tableId, _keyTuple, 3, _index * 1, abi.encodePacked((_element)));
  }

  /** Get tierRate */
  function getTierRate(bytes32 key) internal view returns (uint8[] memory tierRate) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 4);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint8());
  }

  /** Get tierRate (using the specified store) */
  function getTierRate(IStore _store, bytes32 key) internal view returns (uint8[] memory tierRate) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 4);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint8());
  }

  /** Set tierRate */
  function setTierRate(bytes32 key, uint8[] memory tierRate) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setField(_tableId, _keyTuple, 4, EncodeArray.encode((tierRate)));
  }

  /** Set tierRate (using the specified store) */
  function setTierRate(IStore _store, bytes32 key, uint8[] memory tierRate) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setField(_tableId, _keyTuple, 4, EncodeArray.encode((tierRate)));
  }

  /** Get the length of tierRate */
  function lengthTierRate(bytes32 key) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 4, getSchema());
    return _byteLength / 1;
  }

  /** Get the length of tierRate (using the specified store) */
  function lengthTierRate(IStore _store, bytes32 key) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 4, getSchema());
    return _byteLength / 1;
  }

  /** Get an item of tierRate (unchecked, returns invalid data if index overflows) */
  function getItemTierRate(bytes32 key, uint256 _index) internal view returns (uint8) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getFieldSlice(_tableId, _keyTuple, 4, getSchema(), _index * 1, (_index + 1) * 1);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get an item of tierRate (using the specified store) (unchecked, returns invalid data if index overflows) */
  function getItemTierRate(IStore _store, bytes32 key, uint256 _index) internal view returns (uint8) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 4, getSchema(), _index * 1, (_index + 1) * 1);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Push an element to tierRate */
  function pushTierRate(bytes32 key, uint8 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.pushToField(_tableId, _keyTuple, 4, abi.encodePacked((_element)));
  }

  /** Push an element to tierRate (using the specified store) */
  function pushTierRate(IStore _store, bytes32 key, uint8 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.pushToField(_tableId, _keyTuple, 4, abi.encodePacked((_element)));
  }

  /** Pop an element from tierRate */
  function popTierRate(bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.popFromField(_tableId, _keyTuple, 4, 1);
  }

  /** Pop an element from tierRate (using the specified store) */
  function popTierRate(IStore _store, bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.popFromField(_tableId, _keyTuple, 4, 1);
  }

  /** Update an element of tierRate at `_index` */
  function updateTierRate(bytes32 key, uint256 _index, uint8 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.updateInField(_tableId, _keyTuple, 4, _index * 1, abi.encodePacked((_element)));
  }

  /** Update an element of tierRate (using the specified store) at `_index` */
  function updateTierRate(IStore _store, bytes32 key, uint256 _index, uint8 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.updateInField(_tableId, _keyTuple, 4, _index * 1, abi.encodePacked((_element)));
  }

  /** Get the full data */
  function get(bytes32 key) internal view returns (ShopConfigData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, bytes32 key) internal view returns (ShopConfigData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(
    bytes32 key,
    uint8 slotNum,
    uint8 refreshPrice,
    uint8 exPrice,
    uint8[] memory tierPrice,
    uint8[] memory tierRate
  ) internal {
    bytes memory _data = encode(slotNum, refreshPrice, exPrice, tierPrice, tierRate);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    bytes32 key,
    uint8 slotNum,
    uint8 refreshPrice,
    uint8 exPrice,
    uint8[] memory tierPrice,
    uint8[] memory tierRate
  ) internal {
    bytes memory _data = encode(slotNum, refreshPrice, exPrice, tierPrice, tierRate);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using the data struct */
  function set(bytes32 key, ShopConfigData memory _table) internal {
    set(key, _table.slotNum, _table.refreshPrice, _table.exPrice, _table.tierPrice, _table.tierRate);
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, bytes32 key, ShopConfigData memory _table) internal {
    set(_store, key, _table.slotNum, _table.refreshPrice, _table.exPrice, _table.tierPrice, _table.tierRate);
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal view returns (ShopConfigData memory _table) {
    // 3 is the total byte length of static data
    PackedCounter _encodedLengths = PackedCounter.wrap(Bytes.slice32(_blob, 3));

    _table.slotNum = (uint8(Bytes.slice1(_blob, 0)));

    _table.refreshPrice = (uint8(Bytes.slice1(_blob, 1)));

    _table.exPrice = (uint8(Bytes.slice1(_blob, 2)));

    // Store trims the blob if dynamic fields are all empty
    if (_blob.length > 3) {
      uint256 _start;
      // skip static data length + dynamic lengths word
      uint256 _end = 35;

      _start = _end;
      _end += _encodedLengths.atIndex(0);
      _table.tierPrice = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint8());

      _start = _end;
      _end += _encodedLengths.atIndex(1);
      _table.tierRate = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint8());
    }
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    uint8 slotNum,
    uint8 refreshPrice,
    uint8 exPrice,
    uint8[] memory tierPrice,
    uint8[] memory tierRate
  ) internal view returns (bytes memory) {
    uint40[] memory _counters = new uint40[](2);
    _counters[0] = uint40(tierPrice.length * 1);
    _counters[1] = uint40(tierRate.length * 1);
    PackedCounter _encodedLengths = PackedCounterLib.pack(_counters);

    return
      abi.encodePacked(
        slotNum,
        refreshPrice,
        exPrice,
        _encodedLengths.unwrap(),
        EncodeArray.encode((tierPrice)),
        EncodeArray.encode((tierRate))
      );
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(bytes32 key) internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;
  }

  /* Delete all data for given keys */
  function deleteRecord(bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.deleteRecord(_tableId, _keyTuple);
  }
}
